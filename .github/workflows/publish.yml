name: PublishToESOUI

# Publishes the latest release to ESOUI. Release tag has to have a higher version than latest on ESOUI and it must be the same as in the AddOn manifest txt.

permissions:
  contents: write
on:
  # Run manually if automatic trigger didn't work
  workflow_dispatch:
  # Trigger on release
  release:
    types:
      - published
      - edited

jobs:
  upload:
    # Skip if it's just a prerelease or draft
    if: github.event.release.prerelease == false && github.event.release.draft == false

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4.6.0
        with:
          python-version: "^3.6"

      # Get release infos, fall back to latest release if we ran manually
      - name: Get Data from Latest Release
        id: latest_release
        run: |
          LATEST_TAG="$(echo "$(gh release list | python .scripts/furc_utils.py getlatest)")"
          if [[ $RELEASE_TAG ]]; then
            if [[ "$RELEASE_TAG" != "$LATEST_TAG" ]]; then
              echo "ðŸ”¥ Release tag '$RELEASE_TAG' is different from latest release '$LATEST_TAG' ðŸ”¥"
              echo "ðŸ”¥ Please publish nonstandard releases manually to avoid unforeseen problems ðŸ”¥"
              exit 1
            fi
          else
            RELEASE_TAG=$LATEST_TAG
          fi
          RELEASE_NOTES="$(gh release view "$RELEASE_TAG" --json body --jq '.body')"
          RELEASE_ARCHIVE="$(gh release view "$RELEASE_TAG" --json assets --jq '.assets[0].url')"
          echo "TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "NOTE=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "ARCHIVE=$RELEASE_ARCHIVE" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}

      # Will fail if TAG <= live version
      # File modifications: Changelog
      - name: Publish
        run: python ./.scripts/publish.py \
          --tag "${{ steps.latest_release.outputs.TAG }}" \
          --note "${{ steps.latest_release.outputs.NOTE }}" \
          --archive-file "${{ steps.latest_release.outputs.ARCHIVE }}"
        env:
          ESOUI_API_TOKEN: ${{ secrets.ESOUI_API_TOKEN }}

      # Commit CHANGELOG, if any exists, so it doesn't lag behind
      - name: Commit Changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git diff --cached --quiet --exit-code
          if [[ $? -eq 0 ]]; then
            echo "Changelog unchanged"
          else
            git add CHANGELOG
            git commit -m "CHANGELOG for release ${{ steps.latest_release.outputs.TAG }}"
            git push --force
          fi

      # Point the tag to the commit containing the new CHANGELOG
      - name: Tag to latest commit
        run: |
          gh release edit "${{ steps.latest_release.outputs.TAG }}" --target HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
